diff -ur lighttpd-1.4.28.orig/configure.ac lighttpd-1.4.28.new/configure.ac
--- lighttpd-1.4.28.orig/configure.ac	2010-08-13 20:10:15.000000000 +0900
+++ lighttpd-1.4.28.new/configure.ac	2011-07-04 15:41:56.000000000 +0900
@@ -67,6 +67,13 @@
 AC_TYPE_OFF_T
 AC_TYPE_PID_T
 AC_TYPE_SIZE_T
+AC_CHECK_SIZEOF(size_t)
+
+dnl Checks for Endian
+AC_C_BIGENDIAN
+if test "x$ac_cv_c_bigendian" = "xyes"; then
+   CFLAGS="$CFLAGS -DWORDS_BIGENDIAN"
+fi
 
 AC_CHECK_MEMBER(struct tm.tm_gmtoff,[AC_DEFINE([HAVE_STRUCT_TM_GMTOFF],[1],[gmtoff in struct tm])],,[#include <time.h>])
 AC_CHECK_TYPES(struct sockaddr_storage,,,[#include <sys/socket.h>])
@@ -215,6 +222,30 @@
  AC_SUBST(ATTR_LIB)
 fi
 
+dnl Check for websocket version
+AC_MSG_CHECKING(whether --with-websocket option specified)
+AC_ARG_WITH(
+        websocket,
+        [  --with-websocket@<:@=IETF-{00,08}@:>@
+                                  specify draft version : default=IETF-00],
+        [ websocket=$withval ],
+        [ websocket=no ])
+AC_MSG_RESULT(${websocket})
+if test "x${websocket}" == "xyes" ||
+   test "x${websocket}" == "xietf-00" ||
+   test "x${websocket}" == "xIETF-00"; then
+   websocket="IETF-00"
+   WEBSOCKET_VERSION_CFLAGS="-D_MOD_WEBSOCKET_SPEC_IETF_00_"
+elif test "x${websocket}" == "xietf-08" ||
+     test "x${websocket}" == "xIETF-08"; then
+   WEBSOCKET_VERSION_CFLAGS="-D_MOD_WEBSOCKET_SPEC_IETF_08_"
+elif test "x${websocket}" != "xno"; then
+   AC_MSG_ERROR([websocket option is invalid. plz specify IETF-{00,08}])
+fi
+AC_SUBST(websocket)
+AC_SUBST(WEBSOCKET_VERSION_CFLAGS)
+CFLAGS="$CFLAGS $WEBSOCKET_VERSION_CFLAGS"
+
 dnl openssl on solaris needs -lsocket -lnsl
 AC_SEARCH_LIBS(socket,socket)
 AC_SEARCH_LIBS(gethostbyname,nsl socket)
@@ -625,6 +656,13 @@
 do_build="mod_cgi mod_fastcgi mod_extforward mod_proxy mod_evhost mod_simple_vhost mod_access mod_alias mod_setenv mod_usertrack mod_auth mod_status mod_accesslog"
 do_build="$do_build mod_rrdtool mod_secdownload mod_expire mod_compress mod_dirlisting mod_indexfile mod_userdir mod_webdav mod_staticfile mod_scgi mod_flv_streaming"
 
+if test "x${websocket}" != "xno"; then
+        plugins="mod_websocket(${websocket})"
+        do_build="$do_build $plugins"
+else
+        no_build="$no_build mod_websocket"
+fi
+
 plugins="mod_rewrite mod_redirect mod_ssi mod_trigger_b4_dl"
 features="regex-conditionals"
 if test ! "x$PCRE_LIB" = x; then
diff -ur lighttpd-1.4.28.orig/src/Makefile.am lighttpd-1.4.28.new/src/Makefile.am
--- lighttpd-1.4.28.orig/src/Makefile.am	2010-08-12 05:44:17.000000000 +0900
+++ lighttpd-1.4.28.new/src/Makefile.am	2011-07-04 15:20:16.000000000 +0900
@@ -95,6 +95,11 @@
 common_libadd =
 endif
 
+lib_LTLIBRARIES += mod_websocket.la
+mod_websocket_la_SOURCES = mod_websocket.c sha1.c base64.c mod_websocket_conv.c mod_websocket_connector.c mod_websocket_handshake.c mod_websocket_frame.c
+mod_websocket_la_LDFLAGS = -module -export-dynamic -avoid-version -no-undefined
+mod_websocket_la_LIBADD = $(common_libadd) -licui18n -licuuc
+
 lib_LTLIBRARIES += mod_flv_streaming.la
 mod_flv_streaming_la_SOURCES = mod_flv_streaming.c
 mod_flv_streaming_la_LDFLAGS = -module -export-dynamic -avoid-version -no-undefined
lighttpd-1.4.28.new/srcだけに発見: Makefile.am~
diff -ur lighttpd-1.4.28.orig/src/base.h lighttpd-1.4.28.new/src/base.h
--- lighttpd-1.4.28.orig/src/base.h	2010-08-07 21:44:17.000000000 +0900
+++ lighttpd-1.4.28.new/src/base.h	2011-07-04 15:15:14.000000000 +0900
@@ -331,7 +331,8 @@
 	CON_STATE_WRITE,
 	CON_STATE_RESPONSE_END,
 	CON_STATE_ERROR,
-	CON_STATE_CLOSE
+	CON_STATE_CLOSE,
+	CON_STATE_READ_CONTINUOUS,
 } connection_state_t;
 
 typedef enum { COND_RESULT_UNSET, COND_RESULT_FALSE, COND_RESULT_TRUE } cond_result_t;
diff -ur lighttpd-1.4.28.orig/src/connections-glue.c lighttpd-1.4.28.new/src/connections-glue.c
--- lighttpd-1.4.28.orig/src/connections-glue.c	2010-08-17 18:04:38.000000000 +0900
+++ lighttpd-1.4.28.new/src/connections-glue.c	2011-07-04 15:15:14.000000000 +0900
@@ -14,6 +14,7 @@
 	case CON_STATE_REQUEST_END: return "req-end";
 	case CON_STATE_RESPONSE_START: return "resp-start";
 	case CON_STATE_RESPONSE_END: return "resp-end";
+	case CON_STATE_READ_CONTINUOUS: return "read-continuous";
 	default: return "(unknown)";
 	}
 }
@@ -31,6 +32,7 @@
 	case CON_STATE_REQUEST_END: return "Q";
 	case CON_STATE_RESPONSE_START: return "s";
 	case CON_STATE_RESPONSE_END: return "S";
+	case CON_STATE_READ_CONTINUOUS: return "F";
 	default: return "x";
 	}
 }
diff -ur lighttpd-1.4.28.orig/src/connections.c lighttpd-1.4.28.new/src/connections.c
--- lighttpd-1.4.28.orig/src/connections.c	2010-08-17 18:04:38.000000000 +0900
+++ lighttpd-1.4.28.new/src/connections.c	2011-07-04 15:28:12.000000000 +0900
@@ -1163,6 +1163,8 @@
 		}
 
 		break;
+	case CON_STATE_READ_CONTINUOUS:
+		break;
 	default: break;
 	}
 
@@ -1236,7 +1238,8 @@
 	}
 
 	if (con->state == CON_STATE_READ ||
-	    con->state == CON_STATE_READ_POST) {
+	    con->state == CON_STATE_READ_POST ||
+		con->state == CON_STATE_READ_CONTINUOUS) {
 		connection_handle_read_state(srv, con);
 	}
 
@@ -1498,6 +1501,9 @@
 			case HANDLER_COMEBACK:
 				done = -1;
 			case HANDLER_WAIT_FOR_EVENT:
+				if (con->state == CON_STATE_READ_CONTINUOUS) {
+					break;
+				}
 				/* come back here */
 				connection_set_state(srv, con, CON_STATE_HANDLE_REQUEST);
 
@@ -1638,12 +1644,18 @@
 			break;
 		case CON_STATE_READ_POST:
 		case CON_STATE_READ:
+		case CON_STATE_READ_CONTINUOUS:
 			if (srv->srvconf.log_state_handling) {
 				log_error_write(srv, __FILE__, __LINE__, "sds",
 						"state for fd", con->fd, connection_get_state(con->state));
 			}
 
 			connection_handle_read_state(srv, con);
+
+            if (con->state == CON_STATE_READ_CONTINUOUS) {
+                plugins_call_read_continuous(srv, con);
+            }
+
 			break;
 		case CON_STATE_WRITE:
 			if (srv->srvconf.log_state_handling) {
@@ -1807,6 +1819,9 @@
 			fdevent_event_del(srv->ev, &(con->fde_ndx), con->fd);
 		}
 		break;
+	case CON_STATE_READ_CONTINUOUS:
+		/* leave up to plugins */
+		break;
 	default:
 		fdevent_event_del(srv->ev, &(con->fde_ndx), con->fd);
 		break;
diff -ur lighttpd-1.4.28.orig/src/plugin.c lighttpd-1.4.28.new/src/plugin.c
--- lighttpd-1.4.28.orig/src/plugin.c	2010-08-17 18:04:38.000000000 +0900
+++ lighttpd-1.4.28.new/src/plugin.c	2011-07-04 15:15:14.000000000 +0900
@@ -44,6 +44,7 @@
 		PLUGIN_FUNC_INIT,
 		PLUGIN_FUNC_CLEANUP,
 		PLUGIN_FUNC_SET_DEFAULTS,
+		PLUGIN_FUNC_READ_CONTINUOUS,
 
 		PLUGIN_FUNC_SIZEOF
 } plugin_t;
@@ -274,6 +275,7 @@
 PLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_DOCROOT, handle_docroot)
 PLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_PHYSICAL, handle_physical)
 PLUGIN_TO_SLOT(PLUGIN_FUNC_CONNECTION_RESET, connection_reset)
+PLUGIN_TO_SLOT(PLUGIN_FUNC_READ_CONTINUOUS, read_continuous)
 
 #undef PLUGIN_TO_SLOT
 
@@ -403,6 +405,7 @@
 		PLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_DOCROOT, handle_docroot);
 		PLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_PHYSICAL, handle_physical);
 		PLUGIN_TO_SLOT(PLUGIN_FUNC_CONNECTION_RESET, connection_reset);
+		PLUGIN_TO_SLOT(PLUGIN_FUNC_READ_CONTINUOUS, read_continuous);
 		PLUGIN_TO_SLOT(PLUGIN_FUNC_CLEANUP, cleanup);
 		PLUGIN_TO_SLOT(PLUGIN_FUNC_SET_DEFAULTS, set_defaults);
 #undef PLUGIN_TO_SLOT
diff -ur lighttpd-1.4.28.orig/src/plugin.h lighttpd-1.4.28.new/src/plugin.h
--- lighttpd-1.4.28.orig/src/plugin.h	2010-02-02 08:28:20.000000000 +0900
+++ lighttpd-1.4.28.new/src/plugin.h	2011-07-04 15:15:14.000000000 +0900
@@ -23,6 +23,7 @@
 #define PHYSICALPATH_FUNC  CONNECTION_FUNC
 #define REQUESTDONE_FUNC   CONNECTION_FUNC
 #define URIHANDLER_FUNC    CONNECTION_FUNC
+#define READ_CONT_FUNC     CONNECTION_FUNC
 
 #define PLUGIN_DATA        size_t id
 
@@ -55,6 +56,7 @@
 											    */
 	handler_t (* handle_subrequest)      (server *srv, connection *con, void *p_d);    /* */
 	handler_t (* connection_reset)       (server *srv, connection *con, void *p_d);    /* */
+	handler_t (* read_continuous)        (server *srv, connection *con, void *p_d);    /* */
 	void *data;
 
 	/* dlopen handle */
@@ -74,6 +76,7 @@
 handler_t plugins_call_handle_connection_close(server *srv, connection *con);
 handler_t plugins_call_handle_joblist(server *srv, connection *con);
 handler_t plugins_call_connection_reset(server *srv, connection *con);
+handler_t plugins_call_read_continuous(server *srv, connection *con);
 
 handler_t plugins_call_handle_trigger(server *srv);
 handler_t plugins_call_handle_sighup(server *srv);
